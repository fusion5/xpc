typename  : /[a-zA-Z][a-zA-Z0-9]*/ ;
typevar   : /[a-z][a-z0-9]*/ ;
number    : /[0-9]+/ ;
character : /'.'/ ;
string    : /\"(\\\\.|[^\"])*\"/ ;

inttype   : 'i' | 'u' ;
basetype  : (<inttype>("08"|"16"|"32"|"64")) | 'c' | 'd' | 'b' | "null" ;
tyarg     : <basetype> | <typevar> ;

typeapp   : <typename> ('_' <tyexp>)* ;
tysum     : <tyexp> '+' <tyexp> ;
typrd     : <tysum> '*' <tysum> ;
tyexp     : <typevar>
          | <typeapp>
          ;
tydef     : '(' <tydef> ')'
          | <tydef> '+' <tydef>
          | <tyexp>
          ;
ident     : <typeapp>'_'/[a-zA-Z_][a-zA-Z0-9_]*/ ;

factor    : '(' <lexp> ')'
                | <number>
                | <character>
                | <string>
                | <ident> '(' <lexp>? (',' <lexp>)* ')'
                | <ident> ;

term      : <factor> (('*' | '/' | '%') <factor>)* ;
lexp      : <term> (('+' | '-') <term>)* ;

stmt      : '{' <stmt>* '}'
                | "while" '(' <exp> ')' <stmt>
                | "if"    '(' <exp> ')' <stmt>
                | <ident> '=' <lexp> ';'
                | "print" '(' <lexp>? ')' ';'
                | "return" <lexp> ';'
                | <ident> '(' <ident>? (',' <ident>)* ')' ';' ;
                                                              
exp       : <lexp> '>' <lexp>
                | <lexp> '<' <lexp> 
                | <lexp> ">=" <lexp> 
                | <lexp> "<=" <lexp>
                | <lexp> "!=" <lexp>
                | <lexp> "==" <lexp> ;
                           
decls     : (<ident> ';')* ;
args      : <ident>? (',' <ident>)* ;
body      : '{' <decls> <stmt>* '}' ;
function  : <ident> '(' <args> ')' <body> ;
tyfun     : <typename> (<typevar>)* '=' <tydef> ;
includes  : ("#include" <string>)* ;
typedefs  : ("type" <tyfun> ';')* ;
smallc    : /^/ <includes> <typedefs> <decls> <function>+ /$/ ;
